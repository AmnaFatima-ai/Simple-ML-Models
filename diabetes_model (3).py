# -*- coding: utf-8 -*-
"""Diabetes model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rf_Jth2G5gty28LfFdOiMKM1Zse7debT

# **Import dependencies/libraries**
"""

import pandas as pd # it's handling and analysing data in tabel format(datastes/dataframe)
import numpy as np # (numpy==numerical python)for numerical operations like working with arrays and math functions
import matplotlib.pyplot as plt # that creating statics plots,graphs and charts and visualization
from sklearn.model_selection import train_test_split# that spliting data into training and testing sets
from sklearn.metrics import accuracy_score,confusion_matrix # that evaluating the models performances
from sklearn.linear_model import LogisticRegression # its best the classifications

"""# **uploading and importing data from drive to the colab**"""

from google.colab import drive
drive.mount('/content/drive')
dataset_path=('/content/drive/MyDrive/diabetes.csv')

"""# **Read the dataset by using the pandas librery**"""

dataset= pd.read_csv(dataset_path)
head = dataset.head(2)#head ptint 5 values but pirnt 2 values as by default
print(head)

"""# **Missing value in the dataset or not**"""

missing_value= dataset.isnull().sum().sum()
print(missing_value) #it's show the missing value

columns = dataset.columns
print(columns)

"""# **Dividing the dataset**"""

x= dataset[['Age', 'Gender', 'Polyuria', 'Polydipsia', 'sudden weight loss',
       'weakness', 'Polyphagia', 'Genital thrush', 'visual blurring',
       'Itching', 'Irritability', 'delayed healing', 'partial paresis',
       'muscle stiffness', 'Alopecia', 'Obesity']]
y= dataset['class']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2, random_state=42)

"""# **Apply algorithm**"""

model = LogisticRegression()
model.fit(x_train,y_train)

y_pred= model.predict(x_test)

"""# **Evaluate model performance**"""

accuracy= accuracy_score(y_test, y_pred)
print(accuracy)

"""# **Confusion matrix**"""

conf_matrix= confusion_matrix(y_test,y_pred)
print(conf_matrix)

"""# **Create bar chart**"""

# extract values from confusion matrix
TN,FP,FN,TP=conf_matrix.ravel()
#create the bar chart
labels= ['True Negative','False Positive','False Negative','True Positive']
values=[TN,FP,FN,TP]
# ploting the bar chart
plt.figure(figsize=(8,6))
plt.bar(labels,values,color=['pink','red','purple','orange'])
plt.xlabel('classification')
plt.ylabel('count')
plt.title('confusion_matrix(bar chart)')
plt.show()